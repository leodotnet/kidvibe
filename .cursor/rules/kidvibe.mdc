---
alwaysApply: true
---

# KidVibe 项目开发规则

## 项目架构
- 前端：Next.js (React + TypeScript)
- 后端：Python + FastAPI + SQLite
- 大模型支持：Gemini、OpenAI、Ollama

## 前端开发规则 (Next.js)

### 文件结构
```
frontend/
├── app/                    # Next.js 13+ App Router
│   ├── (auth)/            # 认证相关页面
│   ├── (dashboard)/       # 仪表板页面
│   ├── api/               # API 路由
│   ├── globals.css        # 全局样式
│   └── layout.tsx         # 根布局
├── components/            # 可复用组件
│   ├── ui/               # 基础 UI 组件
│   ├── forms/            # 表单组件
│   └── layout/           # 布局组件
├── lib/                  # 工具函数和配置
├── types/                # TypeScript 类型定义
└── public/               # 静态资源
```

### 代码规范
- 使用 TypeScript 进行类型检查
- 使用 Tailwind CSS 进行样式设计
- 组件使用函数式组件和 React Hooks
- 使用 Next.js 13+ App Router
- 状态管理优先使用 React Context 或 Zustand
- API 调用使用 fetch 或 axios
- 表单处理使用 react-hook-form + zod 验证

### 组件命名
- 组件文件使用 PascalCase (如 `UserProfile.tsx`)
- 页面文件使用 kebab-case (如 `user-profile.tsx`)
- 工具函数使用 camelCase (如 `formatDate.ts`)

## 后端开发规则 (Python + FastAPI)

### 文件结构
```
backend/
├── app/
│   ├── __init__.py
│   ├── main.py           # FastAPI 应用入口
│   ├── config.py         # 配置管理
│   ├── database.py       # 数据库连接
│   ├── models/           # SQLAlchemy 模型
│   ├── schemas/          # Pydantic 模式
│   ├── api/              # API 路由
│   │   ├── v1/          # API 版本
│   │   └── deps.py      # 依赖注入
│   ├── core/            # 核心功能
│   │   ├── security.py  # 安全相关
│   │   └── ai/          # AI 模型集成
│   └── utils/           # 工具函数
├── alembic/             # 数据库迁移
├── tests/               # 测试文件
└── requirements.txt     # Python 依赖
```

### 代码规范
- 使用 Python 3.11+
- 使用 FastAPI 框架
- 使用 SQLAlchemy ORM 操作数据库
- 使用 Pydantic 进行数据验证
- 使用 Alembic 进行数据库迁移
- 使用 async/await 进行异步操作
- 使用类型注解
- 遵循 PEP 8 代码风格

### API 设计
- RESTful API 设计原则
- 使用 OpenAPI/Swagger 文档
- 统一的错误处理
- JWT 认证
- 请求/响应模型使用 Pydantic

## 数据库规则 (SQLite)

### 数据库设计
- 使用 SQLite 作为开发数据库
- 使用 SQLAlchemy 作为 ORM
- 表名使用 snake_case
- 字段名使用 snake_case
- 主键统一使用 `id` 字段
- 时间字段使用 `created_at` 和 `updated_at`
- 软删除使用 `deleted_at` 字段

### 迁移管理
- 使用 Alembic 进行数据库迁移
- 每个功能创建独立的迁移文件
- 迁移文件命名：`{version}_{description}.py`

## AI 模型集成规则

### 支持的模型
- **Gemini**: Google Gemini API
- **OpenAI**: GPT-3.5/4 系列
- **Ollama**: 本地部署的模型

### 文件结构
```
backend/app/core/ai/
├── __init__.py
├── base.py          # 基础 AI 接口
├── gemini.py        # Gemini 集成
├── openai_client.py # OpenAI 集成
├── ollama_client.py # Ollama 集成
└── factory.py       # AI 客户端工厂
```

### 配置管理
- 使用环境变量管理 API 密钥
- 支持模型切换和配置
- 统一的错误处理和重试机制
- 支持流式响应

## 环境配置

### 前端环境变量 (.env.local)
```
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_APP_NAME=KidVibe
```

### 后端环境变量 (.env)
```
DATABASE_URL=sqlite:///./kidvibe.db
SECRET_KEY=your-secret-key
OPENAI_API_KEY=your-openai-key
GEMINI_API_KEY=your-gemini-key
OLLAMA_BASE_URL=http://localhost:11434
```

## 开发工作流

### 前端开发
1. 使用 `npm run dev` 启动开发服务器
2. 使用 `npm run build` 构建生产版本
3. 使用 `npm run lint` 进行代码检查
4. 使用 `npm run type-check` 进行类型检查

### 后端开发
1. 激活 conda 环境：`conda activate py3.11`
2. 使用 `uvicorn app.main:app --reload` 启动开发服务器
3. 使用 `alembic revision --autogenerate -m "description"` 创建迁移
4. 使用 `alembic upgrade head` 应用迁移
5. 使用 `pytest` 运行测试

## 代码质量

### 前端
- 使用 ESLint 进行代码检查
- 使用 Prettier 进行代码格式化
- 使用 Husky 进行 Git hooks
- 组件必须有 TypeScript 类型定义

### 后端
- 使用 Black 进行代码格式化
- 使用 isort 进行导入排序
- 使用 flake8 进行代码检查
- 使用 mypy 进行类型检查
- 所有函数必须有类型注解

## 安全规范

### 前端
- 敏感信息不暴露在前端代码中
- 使用 HTTPS 进行 API 调用
- 实现适当的错误处理
- 使用 Content Security Policy

### 后端
- 使用环境变量管理敏感信息
- 实现 JWT 认证
- 使用 CORS 配置
- 输入验证和清理
- SQL 注入防护

## 测试规范

### 前端测试
- 使用 Jest 和 React Testing Library
- 组件单元测试
- API 集成测试
- E2E 测试使用 Playwright

### 后端测试
- 使用 pytest 进行测试
- API 端点测试
- 数据库集成测试
- 使用 pytest-asyncio 进行异步测试

## 部署规范

### 前端部署
- 使用 Vercel 或 Netlify
- 环境变量配置
- 构建优化
- CDN 配置

### 后端部署
- 使用 Docker 容器化
- 使用 Gunicorn 作为 WSGI 服务器
- 数据库备份策略
- 监控和日志配置

## 文档规范

### 代码文档
- 使用 JSDoc 注释前端函数
- 使用 docstring 注释后端函数
- API 文档使用 OpenAPI/Swagger
- README 文件包含项目说明和启动步骤

### 提交规范
- 使用 Conventional Commits
- 提交信息格式：`type(scope): description`
- 类型：feat, fix, docs, style, refactor, test, chore # KidVibe 项目开发规则

## 项目架构
- 前端：Next.js (React + TypeScript)
- 后端：Python + FastAPI + SQLite
- 大模型支持：Gemini、OpenAI、Ollama

## 前端开发规则 (Next.js)

### 文件结构
```
frontend/
├── app/                    # Next.js 13+ App Router
│   ├── (auth)/            # 认证相关页面
│   ├── (dashboard)/       # 仪表板页面
│   ├── api/               # API 路由
│   ├── globals.css        # 全局样式
│   └── layout.tsx         # 根布局
├── components/            # 可复用组件
│   ├── ui/               # 基础 UI 组件
│   ├── forms/            # 表单组件
│   └── layout/           # 布局组件
├── lib/                  # 工具函数和配置
├── types/                # TypeScript 类型定义
└── public/               # 静态资源
```

### 代码规范
- 使用 TypeScript 进行类型检查
- 使用 Tailwind CSS 进行样式设计
- 组件使用函数式组件和 React Hooks
- 使用 Next.js 13+ App Router
- 状态管理优先使用 React Context 或 Zustand
- API 调用使用 fetch 或 axios
- 表单处理使用 react-hook-form + zod 验证

### 组件命名
- 组件文件使用 PascalCase (如 `UserProfile.tsx`)
- 页面文件使用 kebab-case (如 `user-profile.tsx`)
- 工具函数使用 camelCase (如 `formatDate.ts`)

## 后端开发规则 (Python + FastAPI)

### 文件结构
```
backend/
├── app/
│   ├── __init__.py
│   ├── main.py           # FastAPI 应用入口
│   ├── config.py         # 配置管理
│   ├── database.py       # 数据库连接
│   ├── models/           # SQLAlchemy 模型
│   ├── schemas/          # Pydantic 模式
│   ├── api/              # API 路由
│   │   ├── v1/          # API 版本
│   │   └── deps.py      # 依赖注入
│   ├── core/            # 核心功能
│   │   ├── security.py  # 安全相关
│   │   └── ai/          # AI 模型集成
│   └── utils/           # 工具函数
├── alembic/             # 数据库迁移
├── tests/               # 测试文件
└── requirements.txt     # Python 依赖
```

### 代码规范
- 使用 Python 3.11+
- 使用 FastAPI 框架
- 使用 SQLAlchemy ORM 操作数据库
- 使用 Pydantic 进行数据验证
- 使用 Alembic 进行数据库迁移
- 使用 async/await 进行异步操作
- 使用类型注解
- 遵循 PEP 8 代码风格

### API 设计
- RESTful API 设计原则
- 使用 OpenAPI/Swagger 文档
- 统一的错误处理
- JWT 认证
- 请求/响应模型使用 Pydantic

## 数据库规则 (SQLite)

### 数据库设计
- 使用 SQLite 作为开发数据库
- 使用 SQLAlchemy 作为 ORM
- 表名使用 snake_case
- 字段名使用 snake_case
- 主键统一使用 `id` 字段
- 时间字段使用 `created_at` 和 `updated_at`
- 软删除使用 `deleted_at` 字段

### 迁移管理
- 使用 Alembic 进行数据库迁移
- 每个功能创建独立的迁移文件
- 迁移文件命名：`{version}_{description}.py`

## AI 模型集成规则

### 支持的模型
- **Gemini**: Google Gemini API
- **OpenAI**: GPT-3.5/4 系列
- **Ollama**: 本地部署的模型

### 文件结构
```
backend/app/core/ai/
├── __init__.py
├── base.py          # 基础 AI 接口
├── gemini.py        # Gemini 集成
├── openai_client.py # OpenAI 集成
├── ollama_client.py # Ollama 集成
└── factory.py       # AI 客户端工厂
```

### 配置管理
- 使用环境变量管理 API 密钥
- 支持模型切换和配置
- 统一的错误处理和重试机制
- 支持流式响应

## 环境配置

### 前端环境变量 (.env.local)
```
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_APP_NAME=KidVibe
```

### 后端环境变量 (.env)
```
DATABASE_URL=sqlite:///./kidvibe.db
SECRET_KEY=your-secret-key
OPENAI_API_KEY=your-openai-key
GEMINI_API_KEY=your-gemini-key
OLLAMA_BASE_URL=http://localhost:11434
```

## 开发工作流

### 前端开发
1. 使用 `npm run dev` 启动开发服务器
2. 使用 `npm run build` 构建生产版本
3. 使用 `npm run lint` 进行代码检查
4. 使用 `npm run type-check` 进行类型检查

### 后端开发
1. 激活 conda 环境：`conda activate py3.11`
2. 使用 `uvicorn app.main:app --reload` 启动开发服务器
3. 使用 `alembic revision --autogenerate -m "description"` 创建迁移
4. 使用 `alembic upgrade head` 应用迁移
5. 使用 `pytest` 运行测试

## 代码质量

### 前端
- 使用 ESLint 进行代码检查
- 使用 Prettier 进行代码格式化
- 使用 Husky 进行 Git hooks
- 组件必须有 TypeScript 类型定义

### 后端
- 使用 Black 进行代码格式化
- 使用 isort 进行导入排序
- 使用 flake8 进行代码检查
- 使用 mypy 进行类型检查
- 所有函数必须有类型注解

## 安全规范

### 前端
- 敏感信息不暴露在前端代码中
- 使用 HTTPS 进行 API 调用
- 实现适当的错误处理
- 使用 Content Security Policy

### 后端
- 使用环境变量管理敏感信息
- 实现 JWT 认证
- 使用 CORS 配置
- 输入验证和清理
- SQL 注入防护

## 测试规范

### 前端测试
- 使用 Jest 和 React Testing Library
- 组件单元测试
- API 集成测试
- E2E 测试使用 Playwright

### 后端测试
- 使用 pytest 进行测试
- API 端点测试
- 数据库集成测试
- 使用 pytest-asyncio 进行异步测试

## 部署规范

### 前端部署
- 使用 Vercel 或 Netlify
- 环境变量配置
- 构建优化
- CDN 配置

### 后端部署
- 使用 Docker 容器化
- 使用 Gunicorn 作为 WSGI 服务器
- 数据库备份策略
- 监控和日志配置

## 文档规范

### 代码文档
- 使用 JSDoc 注释前端函数
- 使用 docstring 注释后端函数
- API 文档使用 OpenAPI/Swagger
- README 文件包含项目说明和启动步骤

### 提交规范
- 使用 Conventional Commits
- 提交信息格式：`type(scope): description`
- 类型：feat, fix, docs, style, refactor, test, chore 